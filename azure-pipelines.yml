pool:
  name: default

trigger: none
jobs:
  - job: Build
    steps:
      - task: DotNetCoreCLI@2
        displayName: "Restore"
        inputs:
          command: 'restore'
          projects: '**/*.csproj'
          feedsToUse: 'select'
          vstsFeed: 'fa87d356-d9e8-410c-bf26-0078ed3b4646/d6f03ca5-d849-4f99-8de6-b510f6143d44'

      - task: DotNetCoreCLI@2
        displayName: "Build"
        inputs:
          command: 'build'
          projects: '**/*.csproj'

      - task: DotNetCoreCLI@2
        displayName: "Run unit and integration tests"
        inputs:
          command: 'test'
          projects: |
            **/UnitTests.csproj
            **/IntegrationTests.csproj
          arguments: '-c Release --collect:"XPlat Code Coverage"'
          testRunTitle: 'Tests'

      - task: DotNetCoreCLI@2
        displayName: 'dotnet Tool Install "reportgenerator"'
        inputs:
          command: custom
          custom: tool
          arguments: 'update dotnet-reportgenerator-globaltool -g'

      - task: PowerShell@2
        inputs:
          targetType: 'inline'
          script: 'reportgenerator -reports:$(Agent.TempDirectory)/**/coverage.cobertura.xml -targetdir:$(build.sourcesdirectory) -reporttypes:"Cobertura"'

      - task: PublishCodeCoverageResults@1
        displayName: 'Publish code coverage from $(build.sourcesdirectory)/Cobertura.xml'
        inputs:
          codeCoverageTool: Cobertura
          summaryFileLocation: '$(build.sourcesdirectory)/Cobertura.xml'

      - task: DotNetCoreCLI@2
        displayName: "Publish api"
        inputs:
          command: 'publish'
          publishWebProjects: true
          arguments: '-c Release -o $(Build.ArtifactStagingDirectory)\Api'

      # - task: Docker@2
      #   inputs:
      #     command: 'build'
      #     Dockerfile: '**/Dockerfile'
      #     arguments: 'PUBLISH_DIRECTORY=$(Build.ArtifactStagingDirectory)'
      # - task: CopyFiles@2
      #   inputs:
      #     SourceFolder: '**\FunctionalTests\bin\Release\**\'
      #     Contents: '**'
      #     TargetFolder: '$(Build.ArtifactStagingDirectory)\FunctionalTests'

      - task: DotNetCoreCLI@2
        displayName: "Publish functional tests"
        inputs:
          command: 'publish'
          publishWebProjects: false
          projects: '**/FunctionalTests.csproj'
          arguments: '-c Release -o $(Build.ArtifactStagingDirectory)\FunctionalTests'

      - task: PublishPipelineArtifact@1
        displayName: "Publish functional tests artifact"
        inputs:
          targetPath: '$(Build.ArtifactStagingDirectory)\FunctionalTests'
          artifact: 'FunctionalTests'
          publishLocation: 'pipeline'

      - task: Docker@2
        displayName: "Docker build"
        inputs:
          command: 'build'
          Dockerfile: '**/Dockerfile'
          tags: 'latest'
          arguments: '-t api'
      
          